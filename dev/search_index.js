var documenterSearchIndex = {"docs":
[{"location":"#VisionHeatmaps.jl","page":"Home","title":"VisionHeatmaps.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for VisionHeatmaps.jl.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install this package and its dependencies, open the Julia REPL and run","category":"page"},{"location":"","page":"Home","title":"Home","text":"]add VisionHeatmaps","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"#VisionHeatmaps.heatmap","page":"Home","title":"VisionHeatmaps.heatmap","text":"heatmap(x::AbstractArray)\nheatmap(x::AbstractArray, pipeline)\nheatmap(x::AbstractArray, image)\nheatmap(x::AbstractArray, image, pipeline)\n\nVisualize 4D arrays as heatmaps, assuming the WHCN convention for input array dimensions (width, height, color channels, batch dimension).\n\n\n\n\n\nheatmap(expl::Explanation)\nheatmap(expl::Explanation, pipeline)\nheatmap(expl::Explanation, image)   \nheatmap(expl::Explanation, image, pipeline)\n\nVisualize Explanation from XAIBase as a vision heatmap. Assumes WHCN convention (width, height, channels, batch dimension) for explanation.val. This will use the default heatmapping style for the given type of explanation.\n\n\n\n\n\nheatmap(input::AbstractArray, analyzer::AbstractXAIMethod)\nheatmap(input::AbstractArray, analyzer::AbstractXAIMethod, image)\n\nCompute an Explanation for a given input using the XAI method analyzer and visualize it as a vision heatmap. This will use the default heatmapping style for the given type of explanation.\n\n\n\n\n\n","category":"function"},{"location":"#VisionHeatmaps.Pipeline","page":"Home","title":"VisionHeatmaps.Pipeline","text":"Pipeline(transforms...)\n\nHeatmapping pipelines sequentially apply transforms.\n\n\n\n\n\n","category":"type"},{"location":"#VisionHeatmaps.AbstractTransform","page":"Home","title":"VisionHeatmaps.AbstractTransform","text":"AbstractTransform\n\nAbstract supertype for all heatmapping transforms.  Custom transforms must implement an apply method.\n\n\n\n\n\n","category":"type"},{"location":"#api-reduction","page":"Home","title":"Color-channel reduction","text":"","category":"section"},{"location":"#VisionHeatmaps.NormReduction","page":"Home","title":"VisionHeatmaps.NormReduction","text":"NormReduction()\n\nComputes 2-norm over color channels\n\n\n\n\n\n","category":"type"},{"location":"#VisionHeatmaps.SumReduction","page":"Home","title":"VisionHeatmaps.SumReduction","text":"SumReduction()\n\nSums up color channels.\n\n\n\n\n\n","category":"type"},{"location":"#VisionHeatmaps.MaxAbsReduction","page":"Home","title":"VisionHeatmaps.MaxAbsReduction","text":"MaxAbsReduction()\n\nComputes maximum(abs, x) over color channels\n\n\n\n\n\n","category":"type"},{"location":"#VisionHeatmaps.SumAbsReduction","page":"Home","title":"VisionHeatmaps.SumAbsReduction","text":"SumAbsReduction()\n\nComputes sum(abs, x) over color channels\n\n\n\n\n\n","category":"type"},{"location":"#VisionHeatmaps.AbsSumReduction","page":"Home","title":"VisionHeatmaps.AbsSumReduction","text":"AbsSumReduction()\n\nComputes abs(sum(x)) the color channels\n\n\n\n\n\n","category":"type"},{"location":"#Manipulating-array-dimensions","page":"Home","title":"Manipulating array dimensions","text":"","category":"section"},{"location":"#VisionHeatmaps.FlipImage","page":"Home","title":"VisionHeatmaps.FlipImage","text":"FlipImage()\n\nPermutes the width and height dimensions of an array. Assumes width and height are the leading directions in the array.\n\n\n\n\n\n","category":"type"},{"location":"#VisionHeatmaps.PermuteDims","page":"Home","title":"VisionHeatmaps.PermuteDims","text":"PermuteDims(dims...)\n\nPermutes arrays according to the specified dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#VisionHeatmaps.DropDims","page":"Home","title":"VisionHeatmaps.DropDims","text":"DropDims(dims...)\n\nDrops specified singleton array dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#Outlier-removal","page":"Home","title":"Outlier removal","text":"","category":"section"},{"location":"#VisionHeatmaps.PercentileClip","page":"Home","title":"VisionHeatmaps.PercentileClip","text":"PercentileClip()\nPercentileClip(lower, upper)\n\nClip values  outside of the specified percentiles of values. Bounds default to 0.001 and 0.999 (99.9% percentiles).\n\n\n\n\n\n","category":"type"},{"location":"#Colormaps","page":"Home","title":"Colormaps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Turn numerical arrays to images by applying color schemes:","category":"page"},{"location":"#VisionHeatmaps.ExtremaColormap","page":"Home","title":"VisionHeatmaps.ExtremaColormap","text":"ExtremaColormap(name::Symbol)\nExtremaColormap(name::Symbol, colorscheme)\n\nApply a sequential colorscheme from ColorSchemes.jl, turning an array of values into an image. Defaults to :batlow.\n\n\n\n\n\n","category":"type"},{"location":"#VisionHeatmaps.CenteredColormap","page":"Home","title":"VisionHeatmaps.CenteredColormap","text":"CenteredColormap(name::Symbol)\nCenteredColormap(name::Symbol, colorscheme)\n\nApply a divergent colorscheme from ColorSchemes.jl, turning an array of values into an image. Defaults to :berlin.\n\n\n\n\n\n","category":"type"},{"location":"#Resizing","page":"Home","title":"Resizing","text":"","category":"section"},{"location":"#VisionHeatmaps.ResizeToImage","page":"Home","title":"VisionHeatmaps.ResizeToImage","text":"ResizeToImage()\nResizeToImage(method)\n\nResize the heatmap to match the image dimensions. In some cases, this is needed for overlays. Defaults to Lanczos(1) from Interpolations.jl.\n\n\n\n\n\n","category":"type"},{"location":"#Image-overlays","page":"Home","title":"Image overlays","text":"","category":"section"},{"location":"#VisionHeatmaps.AlphaOverlay","page":"Home","title":"VisionHeatmaps.AlphaOverlay","text":"AlphaOverlay()\nAlphaOverlay(alpha)\n\nOverlays a heatmap on top of an image. The opacity alpha of the heatmap defaults to 0.6.\n\n\n\n\n\n","category":"type"},{"location":"example/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"example/","page":"Getting started","title":"Getting started","text":"Let's assume you took the following image img, reshaped it to WHCN format (width, height, color channels, batch dimension) and ran it through a vision model:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"using Images\nusing HTTP # hide\nasset_dir = HTTP.URI(\"https://raw.githubusercontent.com/Julia-XAI/VisionHeatmaps.jl/gh-pages/assets/\") # hide\nimg = load(joinpath(asset_dir, \"img1.png\")) # load image file","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"You might use an input space attribution method  (for example from ExplainableAI.jl) to determine which parts of the input contributed most to the \"saxophone\" class.","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"Let's load such an attribution x in WHCN format:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"using JLD2 # hide\nurl = joinpath(asset_dir, \"heatmap.jld2\") # hide\ndata_heatmap = download(url) # hide\nx = load(data_heatmap, \"x\") # load precomputed array from file\ntypeof(x)","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"size(x)","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"To make this attribution more interpretable, we can visualize it as a heatmap:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"using VisionHeatmaps\nheatmap(x)","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"By default, to support batched explanations, a vector of heatmaps is returned. Since our following examples don't use batches, we will use the only function to unpack singleton heatmaps:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"using VisionHeatmaps\nheatmap(x) |> only","category":"page"},{"location":"example/#Custom-heatmapping-pipelines","page":"Getting started","title":"Custom heatmapping pipelines","text":"","category":"section"},{"location":"example/","page":"Getting started","title":"Getting started","text":"VisionHeatmaps internally applies a sequence of image transformations in what we call a Pipeline. The default pipeline corresponds to: ","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"pipe = NormReduction() |> ExtremaColormap() |> FlipImage()","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"We can apply this pipeline by passing it to heatmap:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"heatmap(x, pipe) |> only","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"In the following subsection, we will explain and modify this pipeline step by step.","category":"page"},{"location":"example/#docs-heatmap-reduce","page":"Getting started","title":"Color channel reduction","text":"","category":"section"},{"location":"example/","page":"Getting started","title":"Getting started","text":"For arrays with multiple color channels, the channels need to be reduced to a single scalar value for each pixel, which is later mapped onto a color scheme.","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"Several transformats are available for this purpose. Let's compare the two most commonly used ones. NormReduction reduces color channels in the array by taking their norm, whereas SumReduction takes the sum:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"pipe = NormReduction() |> ExtremaColormap() |> FlipImage()\nheatmap(x, pipe) |> only","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"pipe = SumReduction() |> ExtremaColormap() |> FlipImage()\nheatmap(x, pipe) |> only","category":"page"},{"location":"example/#Colormaps","page":"Getting started","title":"Colormaps","text":"","category":"section"},{"location":"example/","page":"Getting started","title":"Getting started","text":"To map the now color-channel-reduced array onto a color scheme, we first need to normalize all values to the range 0 1.","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"For this purpose, two colormapping transforms are available:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"ExtremaColormap: normalizes colorscheme to the minimum and maximum value in the array.\nCenteredColormap: normalizes colorscheme to the maximum absolute value of the array. Values of zero will be mapped to the center of the color scheme.","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"Since NormReduction only yields positive values, it is well suited for ExtremaColormap. SumReduction on the other hand can yield positive and negative values. If zero-values are meaningful, using a divergent color scheme with CenteredColormap can be the right choice:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"pipe = NormReduction() |> ExtremaColormap() |> FlipImage()\nheatmap(x, pipe) |> only","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"pipe = SumReduction() |> CenteredColormap() |> FlipImage()\nheatmap(x, pipe) |> only","category":"page"},{"location":"example/#Outlier-removal","page":"Getting started","title":"Outlier removal","text":"","category":"section"},{"location":"example/","page":"Getting started","title":"Getting started","text":"While this isn't part of the default heatmapping pipelines, previous heatmaps visibly emphasized three \"dots\" on the neck of the saxophone. Very high values in explanations tend to desaturate colors. For this purpose, we provide the adaptive PercentileClip. By default, it clips the 0.1-th and 99.9-th percentiles of values.","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"pipe = SumReduction() |> PercentileClip() |> CenteredColormap() |> FlipImage()\nheatmap(x, pipe) |> only","category":"page"},{"location":"example/#Custom-color-schemes","page":"Getting started","title":"Custom color schemes","text":"","category":"section"},{"location":"example/","page":"Getting started","title":"Getting started","text":"We can use a custom color scheme from ColorSchemes.jl in our colormap:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"using ColorSchemes\npipe = NormReduction() |> ExtremaColormap(:jet) |> FlipImage()\nheatmap(x, pipe) |> only","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"pipe = NormReduction() |> ExtremaColormap(:viridis) |> FlipImage()\nheatmap(x, pipe) |> only","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"We strongly suggest to only use sequential color schemes with ExtremaColormap  and divergent color schemes with CenteredColormap.","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"tip: ColorSchemes.jl catalogue\nRefer to the ColorSchemes.jl catalogue for a gallery of available color schemes.","category":"page"},{"location":"example/#Overlays","page":"Getting started","title":"Overlays","text":"","category":"section"},{"location":"example/","page":"Getting started","title":"Getting started","text":"Singleton heatmaps can be overlaid on top of the original image. This can be used to recreate CAM-like heatmaps (usually in combination with ResizeToImage):","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"pipe = NormReduction() |> PercentileClip() |> ExtremaColormap(:jet) |> FlipImage() |> AlphaOverlay()\nheatmap(x, img, pipe) |> only","category":"page"},{"location":"example/#Heatmapping-batches","page":"Getting started","title":"Heatmapping batches","text":"","category":"section"},{"location":"example/","page":"Getting started","title":"Getting started","text":"heatmap can also be used to visualize input batches. Let's assume we computed an input space attribution batch for the following images.","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"imgs = [load(joinpath(asset_dir, f)) for f in (\"img1.png\", \"img2.png\", \"img3.png\", \"img4.png\", \"img5.png\")] # load image files ","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"Once again, we assume that batch is in WHCN format:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"url = joinpath(asset_dir, \"heatmaps.jld2\") # hide\ndata_heatmaps = download(url) # hide\nbatch = load(data_heatmaps, \"x\") # load precomputed array from file\ntypeof(batch)","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"size(batch)","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"Calling heatmap will automatically return an vector of images:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"heatmap(batch)","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"These heatmaps can be customized as usual:","category":"page"},{"location":"example/","page":"Getting started","title":"Getting started","text":"pipe = SumReduction() |> CenteredColormap() |> FlipImage()\nheatmap(batch, pipe)","category":"page"}]
}
